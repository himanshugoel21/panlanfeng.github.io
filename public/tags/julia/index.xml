<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julia on Lanfeng Pan&#39;s Random Walk</title>
    <link>/tags/julia/</link>
    <description>Recent content in julia on Lanfeng Pan&#39;s Random Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Load C library in Julia</title>
      <link>/post/2016/02/23/load-c-library-in-julia/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/02/23/load-c-library-in-julia/</guid>
      <description>It is very convenient to load C or C++ library in julia. It is no more than just run a ccall function. There is no need to write any additional C code to wrap it up as long as the C library is sharable. Here we use the Yeppp package as an illustration.
First download the C++ library Yeppp! and make sure that libyeppp.so (or .dylib or .dll) file is available on the system library search path or in the current directory.</description>
    </item>
    
    <item>
      <title>Nonparametric Kernel Estimation and Regression in Julia</title>
      <link>/post/2016/02/22/nonparametric-kernel-estimation-and-regression-in-julia/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/02/22/nonparametric-kernel-estimation-and-regression-in-julia/</guid>
      <description>In term of Nonparametric density estimation and local regression, I would strongly recommend the package KernelEstimator because I developed it.
Comparing to the KernelDensity from JuliaStat group, KernelEstimator provides more flexible kernels. In KernelEstimator, kernel is just a function but in KernelDensity kernel has to be of type Distribution with a closed form character function. KernelDensity use Fourier transformation to reduce the computing complexity and it is much more efficient.</description>
    </item>
    
    <item>
      <title>Statistics using Julia</title>
      <link>/post/2016/02/20/statistics-using-julia/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/02/20/statistics-using-julia/</guid>
      <description>Although still in alpha stage, Julia is already quite usable. It does not have so many packages as R yet but the basic recipes, such as distributions and optimization, are ready. This is enough for research usage because most of time the existing packages does not fit into the purpose. We need to reimplement our own methods any way.
In this post I will introduce some packages and features essential for statistical research.</description>
    </item>
    
  </channel>
</rss>